nextflow_process {

    name "Test Process MAGUS_TREEALIGN"
    script "../main.nf"
    process "MAGUS_TREEALIGN"

    tag "modules"
    tag "modules_mirpedrol"
    tag "magus"
    tag "magus/treealign"
    tag "magus/guidetree"


    test("setoxin - fasta - guide_tree") {

        setup {
            run("MAGUS_GUIDETREE") {
                script "../../guidetree/main.nf"
                process {
                    """
                    input[0] = [ [ id:'test' ], // meta map
                                 file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/setoxin-ref.fa", checkIfExists: true)
                               ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [ [ id:'test' ], // meta map
                             file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/setoxin-ref.fa", checkIfExists: true)
                           ]
                input[1] = MAGUS_GUIDETREE.out.tree.collect{ meta, tree -> tree }.map{ tree -> [[ id: 'test_summary'], tree]}
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                // tests seem to be reproducible on a single machine, but not across different machines
                // test the correct samples are in there
                { assert path(process.out.alignment[0][1]).getTextGzip().contains(">1apf") },
                { assert path(process.out.alignment[0][1]).getTextGzip().contains(">1ahl") },
                { assert path(process.out.alignment[0][1]).getTextGzip().contains(">1atx") },
                { assert path(process.out.alignment[0][1]).getTextGzip().contains(">1sh1") },
                { assert path(process.out.alignment[0][1]).getTextGzip().contains(">1bds") },
                { assert snapshot(process.out.versions).match("with_guide_tree_versions") }
            )
        }
    }
}