nextflow_process {

    name "Test Process MTMALIGN_ALIGN"
    script "../main.nf"
    process "MTMALIGN_ALIGN"

    tag "modules"
    tag "modules_mirpedrol"
    tag "mtmalign"
    tag "mtmalign/align"

    setup {

        run("UNTAR") {
            script "../../../../../modules/mirpedrol/untar/main.nf"
                process {
                    """
                        archive = file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/structures/seatoxin-ref.tar.gz", checkIfExists: true)
                        input[0] = Channel.of(tuple([id:'test'], archive))
                    """
                }
        }
    }

    test("seatoxin - aln") {

        when {
            process {
                """
                    input[0] = UNTAR.out.untar.map { meta,dir -> [[ id:'test' ], file(dir).listFiles().collect()]}
                """
            }
        }

        then {
            assertAll(
                { assert process.success  },
                // mTMalign may be nondeterministic, just check if the pdbs are all in there
                { assert path(process.out.alignment[0][1]).getTextGzip().contains(">1ahl") },
                { assert path(process.out.alignment[0][1]).getTextGzip().contains(">1apf") },
                { assert path(process.out.alignment[0][1]).getTextGzip().contains(">1atx") },
                { assert path(process.out.alignment[0][1]).getTextGzip().contains(">1bds") },
                { assert path(process.out.alignment[0][1]).getTextGzip().contains(">1sh1") },
                { assert snapshot(process.out.versions).match("versions1") }
            )
        }
    }

    test("seatoxin - stub") {

        options '-stub'

        when {
            process {
                """
                    input[0] = UNTAR.out.untar.map { meta,dir -> [[ id:'test' ], file(dir).listFiles().collect()]}
                """
            }
        }

        then {
            assertAll(
                { assert process.success  },
                { assert snapshot(process.out).match() }
            )
        }
    }

}