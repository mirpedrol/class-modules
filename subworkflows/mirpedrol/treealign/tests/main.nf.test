nextflow_workflow {

    name "Test Subworkflow TREEALIGN"
    script "../main.nf"
    workflow "TREEALIGN"

    tag "subworkflows"
    tag "subworkflows_mirpedrol"
    tag "subworkflows/treealign"
	tag "famsa/treealign"
	tag "magus/treealign"
	tag "clustalo/treealign"
	tag "tcoffee/treealign"


	test("run famsa/treealign") {

        setup {
            run("FAMSA_GUIDETREE") {
                script "../../../../modules/mirpedrol/famsa/guidetree/main.nf"
                process {
                    """
                    input[0] = [ [ id:'test' ], // meta map
                                 file(params.test_data['sarscov2']['illumina']['contigs_fasta'], checkIfExists: true)
                               ]
                    """
                }
            }
        }

		when {
			params.treealign = "famsa/treealign"
			workflow {
                """
                input[0] = [ [ id:'test' ], // meta map
                             file(params.test_data['sarscov2']['illumina']['contigs_fasta'], checkIfExists: true)
                           ]
                input[1] = FAMSA_GUIDETREE.out.tree.collect{ meta, tree -> tree }.map{ tree -> [[ id: 'test_summary'], tree]}
                """
			}
		}

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.alignment).match("with_guide_tree_alignment")},
                { assert snapshot(process.out.versions).match("with_guide_tree_versions") }
            )
		}
	}

	test("run magus/treealign") {

        setup {
            run("MAGUS_GUIDETREE") {
                script "../../../../modules/mirpedrol/magus/guidetree/main.nf"
                process {
                    """
                    input[0] = [ [ id:'test' ], // meta map
                                 file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/setoxin-ref.fa", checkIfExists: true)
                               ]
                    """
                }
            }
        }

		when {
			params.treealign = "magus/treealign"
			workflow {
                """
                input[0] = [ [ id:'test' ], // meta map
                             file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/setoxin-ref.fa", checkIfExists: true)
                           ]
                input[1] = MAGUS_GUIDETREE.out.tree.collect{ meta, tree -> tree }.map{ tree -> [[ id: 'test_summary'], tree]}
                """
			}
		}

        then {
            assertAll(
                { assert process.success },
                // tests seem to be reproducible on a single machine, but not across different machines
                // test the correct samples are in there
                { assert path(process.out.alignment[0][1]).getTextGzip().contains(">1apf") },
                { assert path(process.out.alignment[0][1]).getTextGzip().contains(">1ahl") },
                { assert path(process.out.alignment[0][1]).getTextGzip().contains(">1atx") },
                { assert path(process.out.alignment[0][1]).getTextGzip().contains(">1sh1") },
                { assert path(process.out.alignment[0][1]).getTextGzip().contains(">1bds") },
                { assert snapshot(process.out.versions).match("with_guide_tree_versions") }
            )
		}
	}

	test("run clustalo/treealign") {

        setup {

            run("CLUSTALO_GUIDETREE") {
                script "../../../../modules/mirpedrol/clustalo/guidetree/main.nf"
                process {
                    """
                    input[0] = [ [ id:'test' ], // meta map
                                 file(params.test_data['sarscov2']['illumina']['contigs_fasta'], checkIfExists: true)
                               ]
                    """
                }
            }
        }

		when {
			params.treealign = "clustalo/treealign"
			workflow {
                """
                input[0] = [ [ id:'test' ], // meta map
                             file(params.test_data['sarscov2']['illumina']['contigs_fasta'], checkIfExists: true)
                           ]
                input[1] = CLUSTALO_GUIDETREE.out.tree.collect{ meta, tree -> tree }.map{ tree -> [[ id: 'test_summary'], tree]}
                """
			}
		}

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.alignment).match("with_guide_tree_alignment")},
                { assert snapshot(process.out.versions).match("with_guide_tree_versions") }
            )
		}
	}

	test("run tcoffee/treealign") {
        setup {

            run("FAMSA_GUIDETREE") {
                script "../../../../modules/mirpedrol/famsa/guidetree/main.nf"
                process {
                    """
                    input[0] = [ [ id:'test' ],
                                 file(params.test_data['sarscov2']['genome']['informative_sites_fas'], checkIfExists: true)
                               ]

                    """
                }
            }
        }

		when {
			params.treealign = "tcoffee/treealign"
			workflow {
                """
                input[0] = [ [ id:'test' ],
                             file(params.test_data['sarscov2']['genome']['informative_sites_fas'], checkIfExists: true)
                           ]
                input[1] = FAMSA_GUIDETREE.out.tree.collect{ meta, tree -> tree }.map{ tree -> [[ id: 'test'], tree]}
                """
			}
		}

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.alignment).match("alignment_guidetree")},
                { assert snapshot(process.out.versions).match("versions_guidetree") }
            )
		}
	}


}
