nextflow_workflow {

    name "Test Subworkflow MSA_TREEALIGN"
    script "../main.nf"
    workflow "MSA_TREEALIGN"

    tag "subworkflows"
    tag "subworkflows_mirpedrol"
    tag "subworkflows/msa_treealign"
    tag "famsa/treealign"
    tag "magus/treealign"
    tag "clustalo/treealign"
    tag "tcoffee/treealign"
    tag "famsa/guidetree"
    tag "magus/guidetree"
    tag "clustalo/guidetree"


    test("run famsa/treealign") {

        setup {
            run("FAMSA_GUIDETREE") {
                script "../../../../modules/mirpedrol/famsa/guidetree/main.nf"
                process {
                    """
                    input[0] = Channel.of( [ [ id:'test' ], // meta map
                                    file(params.test_data['sarscov2']['illumina']['contigs_fasta'], checkIfExists: true)
                                ])
                    """
                }
            }
        }

        when {
            workflow {
                """
                input[0]  = Channel.of( [ [ id:'test' ], // meta map
                                file(params.test_data['sarscov2']['illumina']['contigs_fasta'], checkIfExists: true)
                        , 'famsa_treealign'
                    ])
                input[1]  = FAMSA_GUIDETREE.out.tree.collect{ meta, tree -> tree }.map{ tree -> [[ id: 'test_summary'], tree, 'famsa_treealign']}
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out.alignment).match("famsa_treealign_alignment")},
                { assert snapshot(workflow.out.versions).match("famsa_treealign_versions") }
            )
        }
    }

    test("run magus/treealign") {

        setup {
            run("MAGUS_GUIDETREE") {
                script "../../../../modules/mirpedrol/magus/guidetree/main.nf"
                process {
                    """
                    input[0] = [ [ id:'test' ], // meta map
                                    file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/setoxin-ref.fa", checkIfExists: true)
                                ]
                    """
                }
            }
        }

        when {
            workflow {
                """
                input[0]  = Channel.of( [ [ id:'test' ], // meta map
                                file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/setoxin-ref.fa", checkIfExists: true)
                        , 'magus_treealign'
                    ])
                input[1]  = MAGUS_GUIDETREE.out.tree.collect{ meta, tree -> tree }.map{ tree -> [[ id: 'test_summary'], tree, 'magus_treealign']}
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                // tests seem to be reproducible on a single machine, but not across different machines
                // test the correct samples are in there
                { assert path(workflow.out.alignment[0][1]).getTextGzip().contains(">1apf") },
                { assert path(workflow.out.alignment[0][1]).getTextGzip().contains(">1ahl") },
                { assert path(workflow.out.alignment[0][1]).getTextGzip().contains(">1atx") },
                { assert path(workflow.out.alignment[0][1]).getTextGzip().contains(">1sh1") },
                { assert path(workflow.out.alignment[0][1]).getTextGzip().contains(">1bds") },
                { assert snapshot(workflow.out.versions).match("magus_treealign_versions") }
            )
        }
    }

    test("run clustalo/treealign") {

        setup {

            run("CLUSTALO_GUIDETREE") {
                script "../../../../modules/mirpedrol/clustalo/guidetree/main.nf"
                process {
                    """
                    input[0] = [ [ id:'test' ], // meta map
                                    file(params.test_data['sarscov2']['illumina']['contigs_fasta'], checkIfExists: true)
                                ]
                    """
                }
            }
        }

        when {
            workflow {
                """
                input[0]  = Channel.of( [ [ id:'test' ], // meta map
                                file(params.test_data['sarscov2']['illumina']['contigs_fasta'], checkIfExists: true)
                        , 'clustalo_treealign'
                    ])
                input[1]  = CLUSTALO_GUIDETREE.out.tree.collect{ meta, tree -> tree }.map{ tree -> [[ id: 'test_summary'], tree, 'clustalo_treealign']}
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out.alignment).match("clustalo_treealign_alignment")},
                { assert snapshot(workflow.out.versions).match("clustalo_treealign_versions") }
            )
        }
    }

    test("run tcoffee/treealign") {

        setup {

            run("FAMSA_GUIDETREE") {
                script "../../../../modules/mirpedrol/famsa/guidetree/main.nf"
                process {
                    """
                    input[0] = [ [ id:'test' ],
                                    file(params.test_data['sarscov2']['genome']['informative_sites_fas'], checkIfExists: true)
                                ]

                    """
                }
            }
        }

        when {
            workflow {
                """
                input[0]  = Channel.of( [ [ id:'test' ],
                                file(params.test_data['sarscov2']['genome']['informative_sites_fas'], checkIfExists: true)
                        , 'tcoffee_treealign'
                    ])
                input[1]  = FAMSA_GUIDETREE.out.tree.collect{ meta, tree -> tree }.map{ tree -> [[ id: 'test'], tree, 'tcoffee_treealign']}
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out.alignment).match("tcoffee_treealign_alignment")},
                { assert snapshot(workflow.out.versions).match("tcoffee_treealign_versions") }
            )
        }
    }


}