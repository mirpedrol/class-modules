nextflow_workflow {

    name "Test Subworkflow MSA_TREEALIGN"
    script "../main.nf"
    workflow "MSA_TREEALIGN"

    tag "subworkflows"
    tag "subworkflows_mirpedrol"
    tag "subworkflows/msa_treealign"
    tag "clustalo/align"
    tag "famsa/align"
    tag "magus/align"
    tag "tcoffee/align"


    test("clustalo/align") {

        when {
            process {
                """
                input[0] = Channel.of( [ id:'test' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fasta/contigs.fasta', checkIfExists: true), 'clustalo_align' )
                input[1] = Channel.of( [ id:'test' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/alignment/test.dnd, checkIfExists: true), 'clustalo_align' )
                input[2] = Channel.of( [] )
                input[3] = Channel.of( [] )
                input[4] = Channel.of( [] )
                input[5] = Channel.of( [] )
                input[6] = Channel.of( [] )
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() },
            )
        }
    }

    test("famsa/align") {

        when {
            process {
                """
                input[0] = Channel.of( [ id:'test' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fasta/contigs.fasta', checkIfExists: true), 'famsa_align' )
                input[1] = Channel.of( [ id:'test' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/alignment/test.dnd, checkIfExists: true), 'famsa_align' )
                input[2] = Channel.of( [] )
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() },
            )
        }
    }

    test("magus/align") {

        when {
            process {
                """
                input[0] = Channel.of( [ id:'test' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fasta/contigs.fasta', checkIfExists: true), 'magus_align' )
                input[1] = Channel.of( [ id:'test' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/alignment/test.dnd, checkIfExists: true), 'magus_align' )
                input[2] = Channel.of( [] )
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() },
            )
        }
    }

    test("tcoffee/align") {

        when {
            process {
                """
                input[0] = Channel.of( [ id:'test' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fasta/contigs.fasta', checkIfExists: true), 'tcoffee_align' )
                input[1] = Channel.of( [ id:'test' ], file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/alignment/test.dnd, checkIfExists: true), 'tcoffee_align' )
                input[2] = Channel.of( [] )
                input[3] = Channel.of( [] )
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() },
            )
        }
    }


}