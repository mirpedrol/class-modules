nextflow_workflow {

    name "Test Subworkflow MSA_GUIDETREE"
    script "../main.nf"
    workflow "MSA_GUIDETREE"

    tag "subworkflows"
    tag "subworkflows_mirpedrol"
    tag "subworkflows/msa_guidetree"
    tag "clustalo/guidetree"
    tag "famsa/guidetree"
    tag "magus/guidetree"

    test("sarscov2 - clustalo/guidetree") {

        when {
            params.guidetree = "clustalo/guidetree"
            workflow {
                """
                input[0] = [ [ id:'test' ], // meta map
                             file(params.test_data['sarscov2']['illumina']['contigs_fasta'], checkIfExists: true)
                           ]
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match()}
            )
        }
    }

    test("sarscov2 - famsa/guidetree") {

        when {
            params.guidetree = "famsa/guidetree"
            workflow {
                """
                input[0] = [ [ id:'test' ], // meta map
                             file(params.test_data['sarscov2']['illumina']['contigs_fasta'], checkIfExists: true)
                           ]
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match()}
            )
        }
    }

    test("sarscov2 - magus/guidetree") {

        when {
            params.guidetree = "magus/guidetree"
            workflow {
                """
                input[0] = [ [ id:'test' ], // meta map
                             file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/setoxin-ref.fa", checkIfExists: true)
                           ]
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert path(workflow.out.guidetree[0][1]).getText().contains("1apf") },
                { assert path(workflow.out.guidetree[0][1]).getText().contains("1ahl") },
                { assert path(workflow.out.guidetree[0][1]).getText().contains("1atx") },
                { assert path(workflow.out.guidetree[0][1]).getText().contains("1sh1") },
                { assert path(workflow.out.guidetree[0][1]).getText().contains("1bds") },
                { assert snapshot(workflow.out.versions).match("versions1") }
            )
        }
    }
}
