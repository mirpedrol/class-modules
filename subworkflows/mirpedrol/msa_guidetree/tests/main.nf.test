nextflow_workflow {

    name "Test Subworkflow MSA_GUIDETREE"
    script "../main.nf"
    workflow "MSA_GUIDETREE"

    tag "subworkflows"
    tag "subworkflows_mirpedrol"
    tag "subworkflows/msa_guidetree"
    tag "famsa/guidetree"
    tag "magus/guidetree"
    tag "clustalo/guidetree"


    test("run famsa/guidetree") {

        when {
            workflow {
                """
                input[0]  = Channel.of( [ [ id:'test' ], // meta map
                                file(params.test_data['sarscov2']['illumina']['contigs_fasta'], checkIfExists: true)
                        , 'famsa_guidetree'
                    ])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out.tree).match("famsa_guidetree_tree")},
                { assert snapshot(workflow.out.versions).match("famsa_guidetree_versions") }
            )
        }
    }

    test("run magus/guidetree") {

        when {
            workflow {
                """
                input[0]  = Channel.of( [ [ id:'test' ], // meta map
                                file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/setoxin-ref.fa", checkIfExists: true)
                        , 'magus_guidetree'
                    ])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                //{ assert snapshot(workflow.out.tree).match("magus_guidetree_tree")},
                // tests seem to be reproducible on a single machine, but not across different machines
                // test the correct samples are in there
                { assert path(workflow.out.tree[0][1]).getText().contains("1apf") },
                { assert path(workflow.out.tree[0][1]).getText().contains("1ahl") },
                { assert path(workflow.out.tree[0][1]).getText().contains("1atx") },
                { assert path(workflow.out.tree[0][1]).getText().contains("1sh1") },
                { assert path(workflow.out.tree[0][1]).getText().contains("1bds") },
                { assert snapshot(workflow.out.versions).match("magus_guidetree_versions") }
            )
        }
    }

    test("run clustalo/guidetree") {

        when {
            workflow {
                """
                input[0]  = Channel.of( [ [ id:'test' ], // meta map
                                file(params.test_data['sarscov2']['illumina']['contigs_fasta'], checkIfExists: true)
                        , 'clustalo_guidetree'
                    ])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out.tree).match("clustalo_guidetree_tree")},
                { assert snapshot(workflow.out.versions).match("clustalo_guidetree_versions") }
            )
        }
    }


}