nextflow_workflow {

    name "Test Subworkflow MSA_GUIDETREE"
    script "../main.nf"
    workflow "MSA_GUIDETREE"

    tag "subworkflows"
    tag "subworkflows_mirpedrol"
    tag "subworkflows/msa_guidetree"
    tag "subworkflows/../../modules/nf-core/clustalo/guidetree"
    tag "subworkflows/../../modules/nf-core/famsa/guidetree"
    tag "subworkflows/../../modules/nf-core/magus/guidetree"


    test("clustalo/guidetree") {

        when {
            workflow {
                """
                input[0] = Channel.of( [[ id:'test' ], file(params.modules_testdata_base_path + 'genomics/eukaryotes/anemonia_sulcata/seatoxin-ref.aln', checkIfExists: true), 'clustalo_guidetree'] )
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match("clustalo/guidetree") },
            )
        }
    }

    test("famsa/guidetree") {

        when {
            workflow {
                """
                input[0] = Channel.of( [[ id:'test' ], file(params.modules_testdata_base_path + 'genomics/eukaryotes/anemonia_sulcata/seatoxin-ref.aln', checkIfExists: true), 'famsa_guidetree'] )
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match("famsa/guidetree") },
            )
        }
    }

    test("magus/guidetree") {

        when {
            workflow {
                """
                input[0] = Channel.of( [[ id:'test' ], file(params.modules_testdata_base_path + 'genomics/eukaryotes/anemonia_sulcata/seatoxin-ref.aln', checkIfExists: true), 'magus_guidetree'] )
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert path(workflow.out.tree[0][1]).getText().contains("1atx") },
                { assert path(workflow.out.tree[0][1]).getText().contains("1bds") },
                { assert path(workflow.out.tree[0][1]).getText().contains("1sh1") },
                { assert path(workflow.out.tree[0][1]).getText().contains("1apf") },
                { assert path(workflow.out.tree[0][1]).getText().contains("1ahl") },
            )
        }
    }


}