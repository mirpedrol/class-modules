nextflow_workflow {

    name "Test Subworkflow MSA_ALIGNMENT"
    script "../main.nf"
    workflow "MSA_ALIGNMENT"

    tag "subworkflows"
    tag "subworkflows_mirpedrol"
    tag "subworkflows/msa_alignment"
    tag "mafft/align"
    tag "kalign/align"
    tag "famsa/align"
    tag "muscle5/super5"
    tag "magus/align"
    tag "clustalo/align"
    tag "tcoffee/align"
    tag "learnmsa/align"


    test("run mafft/align") {

        when {
            workflow {
                """
                input[0]  = Channel.of( [
                    [ id:'test', single_end:false ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fasta/scaffolds.fasta', checkIfExists: true)
                        , 'mafft_align'
                    ])

                input[1]  = Channel.of( [[:], []] )
                input[2]  = Channel.of( [[:], []] )
                input[3]  = Channel.of( [[:], []] )
                input[4]  = Channel.of( [[:], []] )
                input[5]  = Channel.of( [[:], []] )
                input[6]  = Channel.of( false )
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match()}
            )
        }
    }

    test("run kalign/align") {

        when {
            workflow {
                """
                input[0]  = Channel.of( [ [ id:'test' ], // meta map
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fasta/contigs.fasta', checkIfExists: true)
                        , 'kalign_align'
                    ])

                input[1]  = Channel.of( false )
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match()}
            )
        }
    }

    test("run famsa/align") {

        when {
            workflow {
                """
                input[0]  = Channel.of( [ [ id:'test' ], // meta map
                                file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fasta/contigs.fasta', checkIfExists: true)
                        , 'famsa_align'
                    ])

                input[1]  = Channel.of( [[:],[]] )
                input[2]  = Channel.of( false )
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out.alignment).match("famsa_align_alignment")},
                { assert snapshot(workflow.out.versions).match("famsa_align_versions") }
            )
        }
    }

    test("run muscle5/super5") {

        when {
            workflow {
                    """
                        input[0]  = Channel.of( [ [ id:'test' ],
                        file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/setoxin-ref.fa", checkIfExists: true)
                        , 'muscle5_super5'
                    ])

                        input[1]  = Channel.of( false )
                        """
            }
        }

            then {
                assertAll(
                        { assert workflow.success },
                        { assert snapshot(
                                workflow.out.alignment,
                                workflow.out.versions
                            ).match("alignment - uncompressed")
                        },
                        )
        }
    }

    test("run magus/align") {

        when {
            workflow {
                """
                input[0]  = Channel.of( [ [ id:'test' ], // meta map
                                file("https://raw.githubusercontent.com/nf-core/test-datasets/multiplesequencealign/testdata/setoxin-ref.fa", checkIfExists: true)
                        , 'magus_align'
                    ])

                input[1]  = Channel.of( [[:],[]] )
                input[2]  = Channel.of( false )
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                // tests seem to be reproducible on a single machine, but not across different machines
                // test the correct samples are in there
                { assert path(workflow.out.alignment[0][1]).getText().contains(">1apf") },
                { assert path(workflow.out.alignment[0][1]).getText().contains(">1ahl") },
                { assert path(workflow.out.alignment[0][1]).getText().contains(">1atx") },
                { assert path(workflow.out.alignment[0][1]).getText().contains(">1sh1") },
                { assert path(workflow.out.alignment[0][1]).getText().contains(">1bds") },
                { assert snapshot(workflow.out.versions).match("magus_align_versions") }
            )
        }
    }

    test("run clustalo/align") {

        when {
            workflow {
                """
                input[0]  = Channel.of( [ [ id:'test' ], // meta map
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fasta/contigs.fasta', checkIfExists: true)
                        , 'clustalo_align'
                    ])

                input[1]  = Channel.of( [[:],[]] )
                input[2]  = Channel.of( [] )
                input[3]  = Channel.of( [] )
                input[4]  = Channel.of( [] )
                input[5]  = Channel.of( [] )
                input[6]  = Channel.of( false )
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() }
            )
        }
    }

    test("run tcoffee/align") {

        when {
            workflow {
                """
                input[0]  = Channel.of( [ [ id:'test' ],
                                file(params.modules_testdata_base_path + "../../multiplesequencealign/testdata/setoxin-ref.fa", checkIfExists: true)
                        , 'tcoffee_align'
                    ])

                input[1]  = Channel.of( [[:],[]] )
                input[2]  = Channel.of( [[:],[],[]] )
                input[3]  = Channel.of( true )
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert path(workflow.out.alignment.get(0).get(1)).getTextGzip().contains("1ahl") },
                { assert snapshot(workflow.out.versions).match("tcoffee_align_versions")}
            )
        }
    }

    test("run learnmsa/align") {

        when {
            workflow {
                """
                input[0]  = Channel.of( [ [ id:'test' ],
                                file(params.modules_testdata_base_path + "../../multiplesequencealign/testdata/setoxin-ref.fa", checkIfExists: true)
                        , 'learnmsa_align'
                    ])

                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot ( workflow.out ).match() }

            )
        }
    }


}